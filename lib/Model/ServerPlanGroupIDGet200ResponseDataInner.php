<?php
/**
 * ServerPlanGroupIDGet200ResponseDataInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VDSina public API
 *
 * The data format of the incoming request and the returned data: JSON. All dates and timestamps are returned in the Europe/Moscow zone (the time zone in which the API server is located). A permanent authorization token can be obtained in the personal account in viewing the user's account information. The token changes when the user's password is changed. The token will have the same access rights as the specified user on whose behalf the token request was made. If you need to restrict actions for API requests, you need to create a separate user in the account with the necessary set of rights and make requests with this user's token.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@vdsina.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ServerPlanGroupIDGet200ResponseDataInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ServerPlanGroupIDGet200ResponseDataInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_server_plan__groupID__get_200_response_data_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'cost' => 'float',
        'full_cost' => 'float',
        'period' => 'string',
        'min_money' => 'float',
        'can_bonus' => 'bool',
        'description' => 'string',
        'server_group' => 'int',
        'active' => 'bool',
        'enable' => 'bool',
        'data' => '\OpenAPI\Client\Model\Tariff',
        'backup' => '\OpenAPI\Client\Model\ServerPlanGroupIDGet200ResponseDataInnerBackup',
        'has_params' => 'bool',
        'params' => '\OpenAPI\Client\Model\ServerPlanGroupIDGet200ResponseDataInnerParams'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'cost' => null,
        'full_cost' => null,
        'period' => null,
        'min_money' => null,
        'can_bonus' => null,
        'description' => null,
        'server_group' => null,
        'active' => null,
        'enable' => null,
        'data' => null,
        'backup' => null,
        'has_params' => null,
        'params' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'cost' => false,
        'full_cost' => false,
        'period' => false,
        'min_money' => false,
        'can_bonus' => false,
        'description' => false,
        'server_group' => false,
        'active' => false,
        'enable' => false,
        'data' => false,
        'backup' => false,
        'has_params' => false,
        'params' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'cost' => 'cost',
        'full_cost' => 'full_cost',
        'period' => 'period',
        'min_money' => 'min_money',
        'can_bonus' => 'can_bonus',
        'description' => 'description',
        'server_group' => 'server-group',
        'active' => 'active',
        'enable' => 'enable',
        'data' => 'data',
        'backup' => 'backup',
        'has_params' => 'has_params',
        'params' => 'params'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'cost' => 'setCost',
        'full_cost' => 'setFullCost',
        'period' => 'setPeriod',
        'min_money' => 'setMinMoney',
        'can_bonus' => 'setCanBonus',
        'description' => 'setDescription',
        'server_group' => 'setServerGroup',
        'active' => 'setActive',
        'enable' => 'setEnable',
        'data' => 'setData',
        'backup' => 'setBackup',
        'has_params' => 'setHasParams',
        'params' => 'setParams'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'cost' => 'getCost',
        'full_cost' => 'getFullCost',
        'period' => 'getPeriod',
        'min_money' => 'getMinMoney',
        'can_bonus' => 'getCanBonus',
        'description' => 'getDescription',
        'server_group' => 'getServerGroup',
        'active' => 'getActive',
        'enable' => 'getEnable',
        'data' => 'getData',
        'backup' => 'getBackup',
        'has_params' => 'getHasParams',
        'params' => 'getParams'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('cost', $data ?? [], null);
        $this->setIfExists('full_cost', $data ?? [], null);
        $this->setIfExists('period', $data ?? [], 'day');
        $this->setIfExists('min_money', $data ?? [], null);
        $this->setIfExists('can_bonus', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('server_group', $data ?? [], null);
        $this->setIfExists('active', $data ?? [], null);
        $this->setIfExists('enable', $data ?? [], null);
        $this->setIfExists('data', $data ?? [], null);
        $this->setIfExists('backup', $data ?? [], null);
        $this->setIfExists('has_params', $data ?? [], null);
        $this->setIfExists('params', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id Plan ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets cost
     *
     * @return float|null
     */
    public function getCost()
    {
        return $this->container['cost'];
    }

    /**
     * Sets cost
     *
     * @param float|null $cost Plan cost with client discounts
     *
     * @return self
     */
    public function setCost($cost)
    {
        if (is_null($cost)) {
            throw new \InvalidArgumentException('non-nullable cost cannot be null');
        }
        $this->container['cost'] = $cost;

        return $this;
    }

    /**
     * Gets full_cost
     *
     * @return float|null
     */
    public function getFullCost()
    {
        return $this->container['full_cost'];
    }

    /**
     * Sets full_cost
     *
     * @param float|null $full_cost Plan full cost
     *
     * @return self
     */
    public function setFullCost($full_cost)
    {
        if (is_null($full_cost)) {
            throw new \InvalidArgumentException('non-nullable full_cost cannot be null');
        }
        $this->container['full_cost'] = $full_cost;

        return $this;
    }

    /**
     * Gets period
     *
     * @return string|null
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param string|null $period period
     *
     * @return self
     */
    public function setPeriod($period)
    {
        if (is_null($period)) {
            throw new \InvalidArgumentException('non-nullable period cannot be null');
        }
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets min_money
     *
     * @return float|null
     */
    public function getMinMoney()
    {
        return $this->container['min_money'];
    }

    /**
     * Sets min_money
     *
     * @param float|null $min_money Minimal balance for order this plan
     *
     * @return self
     */
    public function setMinMoney($min_money)
    {
        if (is_null($min_money)) {
            throw new \InvalidArgumentException('non-nullable min_money cannot be null');
        }
        $this->container['min_money'] = $min_money;

        return $this;
    }

    /**
     * Gets can_bonus
     *
     * @return bool|null
     */
    public function getCanBonus()
    {
        return $this->container['can_bonus'];
    }

    /**
     * Sets can_bonus
     *
     * @param bool|null $can_bonus Can pay with bonuses when order this plan
     *
     * @return self
     */
    public function setCanBonus($can_bonus)
    {
        if (is_null($can_bonus)) {
            throw new \InvalidArgumentException('non-nullable can_bonus cannot be null');
        }
        $this->container['can_bonus'] = $can_bonus;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets server_group
     *
     * @return int|null
     */
    public function getServerGroup()
    {
        return $this->container['server_group'];
    }

    /**
     * Sets server_group
     *
     * @param int|null $server_group Tariff plan group ID
     *
     * @return self
     */
    public function setServerGroup($server_group)
    {
        if (is_null($server_group)) {
            throw new \InvalidArgumentException('non-nullable server_group cannot be null');
        }
        $this->container['server_group'] = $server_group;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return self
     */
    public function setActive($active)
    {
        if (is_null($active)) {
            throw new \InvalidArgumentException('non-nullable active cannot be null');
        }
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets enable
     *
     * @return bool|null
     */
    public function getEnable()
    {
        return $this->container['enable'];
    }

    /**
     * Sets enable
     *
     * @param bool|null $enable enable
     *
     * @return self
     */
    public function setEnable($enable)
    {
        if (is_null($enable)) {
            throw new \InvalidArgumentException('non-nullable enable cannot be null');
        }
        $this->container['enable'] = $enable;

        return $this;
    }

    /**
     * Gets data
     *
     * @return \OpenAPI\Client\Model\Tariff|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param \OpenAPI\Client\Model\Tariff|null $data data
     *
     * @return self
     */
    public function setData($data)
    {
        if (is_null($data)) {
            throw new \InvalidArgumentException('non-nullable data cannot be null');
        }
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets backup
     *
     * @return \OpenAPI\Client\Model\ServerPlanGroupIDGet200ResponseDataInnerBackup|null
     */
    public function getBackup()
    {
        return $this->container['backup'];
    }

    /**
     * Sets backup
     *
     * @param \OpenAPI\Client\Model\ServerPlanGroupIDGet200ResponseDataInnerBackup|null $backup backup
     *
     * @return self
     */
    public function setBackup($backup)
    {
        if (is_null($backup)) {
            throw new \InvalidArgumentException('non-nullable backup cannot be null');
        }
        $this->container['backup'] = $backup;

        return $this;
    }

    /**
     * Gets has_params
     *
     * @return bool|null
     */
    public function getHasParams()
    {
        return $this->container['has_params'];
    }

    /**
     * Sets has_params
     *
     * @param bool|null $has_params When true this plan has expandable params
     *
     * @return self
     */
    public function setHasParams($has_params)
    {
        if (is_null($has_params)) {
            throw new \InvalidArgumentException('non-nullable has_params cannot be null');
        }
        $this->container['has_params'] = $has_params;

        return $this;
    }

    /**
     * Gets params
     *
     * @return \OpenAPI\Client\Model\ServerPlanGroupIDGet200ResponseDataInnerParams|null
     */
    public function getParams()
    {
        return $this->container['params'];
    }

    /**
     * Sets params
     *
     * @param \OpenAPI\Client\Model\ServerPlanGroupIDGet200ResponseDataInnerParams|null $params params
     *
     * @return self
     */
    public function setParams($params)
    {
        if (is_null($params)) {
            array_push($this->openAPINullablesSetToNull, 'params');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('params', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['params'] = $params;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


