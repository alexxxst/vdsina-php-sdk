<?php
/**
 * ServerStatServerIDGet200ResponseDataInnerStat
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VDSina public API
 *
 * The data format of the incoming request and the returned data: JSON. All dates and timestamps are returned in the Europe/Moscow zone (the time zone in which the API server is located). A permanent authorization token can be obtained in the personal account in viewing the user's account information. The token changes when the user's password is changed. The token will have the same access rights as the specified user on whose behalf the token request was made. If you need to restrict actions for API requests, you need to create a separate user in the account with the necessary set of rights and make requests with this user's token.
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: support@vdsina.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ServerStatServerIDGet200ResponseDataInnerStat Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ServerStatServerIDGet200ResponseDataInnerStat implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_server_stat__serverID__get_200_response_data_inner_stat';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cpu' => 'float',
        'disk_reads' => 'int',
        'disk_writes' => 'int',
        'lnet_rx' => 'int',
        'lnet_tx' => 'int',
        'vnet_rx' => 'int',
        'vnet_tx' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cpu' => null,
        'disk_reads' => null,
        'disk_writes' => null,
        'lnet_rx' => null,
        'lnet_tx' => null,
        'vnet_rx' => null,
        'vnet_tx' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cpu' => false,
        'disk_reads' => false,
        'disk_writes' => false,
        'lnet_rx' => false,
        'lnet_tx' => false,
        'vnet_rx' => false,
        'vnet_tx' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cpu' => 'cpu',
        'disk_reads' => 'disk_reads',
        'disk_writes' => 'disk_writes',
        'lnet_rx' => 'lnet_rx',
        'lnet_tx' => 'lnet_tx',
        'vnet_rx' => 'vnet_rx',
        'vnet_tx' => 'vnet_tx'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cpu' => 'setCpu',
        'disk_reads' => 'setDiskReads',
        'disk_writes' => 'setDiskWrites',
        'lnet_rx' => 'setLnetRx',
        'lnet_tx' => 'setLnetTx',
        'vnet_rx' => 'setVnetRx',
        'vnet_tx' => 'setVnetTx'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cpu' => 'getCpu',
        'disk_reads' => 'getDiskReads',
        'disk_writes' => 'getDiskWrites',
        'lnet_rx' => 'getLnetRx',
        'lnet_tx' => 'getLnetTx',
        'vnet_rx' => 'getVnetRx',
        'vnet_tx' => 'getVnetTx'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('cpu', $data ?? [], null);
        $this->setIfExists('disk_reads', $data ?? [], null);
        $this->setIfExists('disk_writes', $data ?? [], null);
        $this->setIfExists('lnet_rx', $data ?? [], null);
        $this->setIfExists('lnet_tx', $data ?? [], null);
        $this->setIfExists('vnet_rx', $data ?? [], null);
        $this->setIfExists('vnet_tx', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cpu
     *
     * @return float|null
     */
    public function getCpu()
    {
        return $this->container['cpu'];
    }

    /**
     * Sets cpu
     *
     * @param float|null $cpu Average CPU utilization as a percentage per time segment
     *
     * @return self
     */
    public function setCpu($cpu)
    {
        if (is_null($cpu)) {
            throw new \InvalidArgumentException('non-nullable cpu cannot be null');
        }
        $this->container['cpu'] = $cpu;

        return $this;
    }

    /**
     * Gets disk_reads
     *
     * @return int|null
     */
    public function getDiskReads()
    {
        return $this->container['disk_reads'];
    }

    /**
     * Sets disk_reads
     *
     * @param int|null $disk_reads The number of read operations for the specified time segment
     *
     * @return self
     */
    public function setDiskReads($disk_reads)
    {
        if (is_null($disk_reads)) {
            throw new \InvalidArgumentException('non-nullable disk_reads cannot be null');
        }
        $this->container['disk_reads'] = $disk_reads;

        return $this;
    }

    /**
     * Gets disk_writes
     *
     * @return int|null
     */
    public function getDiskWrites()
    {
        return $this->container['disk_writes'];
    }

    /**
     * Sets disk_writes
     *
     * @param int|null $disk_writes The number of write operations for the specified time segment
     *
     * @return self
     */
    public function setDiskWrites($disk_writes)
    {
        if (is_null($disk_writes)) {
            throw new \InvalidArgumentException('non-nullable disk_writes cannot be null');
        }
        $this->container['disk_writes'] = $disk_writes;

        return $this;
    }

    /**
     * Gets lnet_rx
     *
     * @return int|null
     */
    public function getLnetRx()
    {
        return $this->container['lnet_rx'];
    }

    /**
     * Sets lnet_rx
     *
     * @param int|null $lnet_rx Received data over local network in bytes
     *
     * @return self
     */
    public function setLnetRx($lnet_rx)
    {
        if (is_null($lnet_rx)) {
            throw new \InvalidArgumentException('non-nullable lnet_rx cannot be null');
        }
        $this->container['lnet_rx'] = $lnet_rx;

        return $this;
    }

    /**
     * Gets lnet_tx
     *
     * @return int|null
     */
    public function getLnetTx()
    {
        return $this->container['lnet_tx'];
    }

    /**
     * Sets lnet_tx
     *
     * @param int|null $lnet_tx Transmitted data over local network in bytes
     *
     * @return self
     */
    public function setLnetTx($lnet_tx)
    {
        if (is_null($lnet_tx)) {
            throw new \InvalidArgumentException('non-nullable lnet_tx cannot be null');
        }
        $this->container['lnet_tx'] = $lnet_tx;

        return $this;
    }

    /**
     * Gets vnet_rx
     *
     * @return int|null
     */
    public function getVnetRx()
    {
        return $this->container['vnet_rx'];
    }

    /**
     * Sets vnet_rx
     *
     * @param int|null $vnet_rx Received data over external network (internet) in bytes
     *
     * @return self
     */
    public function setVnetRx($vnet_rx)
    {
        if (is_null($vnet_rx)) {
            throw new \InvalidArgumentException('non-nullable vnet_rx cannot be null');
        }
        $this->container['vnet_rx'] = $vnet_rx;

        return $this;
    }

    /**
     * Gets vnet_tx
     *
     * @return int|null
     */
    public function getVnetTx()
    {
        return $this->container['vnet_tx'];
    }

    /**
     * Sets vnet_tx
     *
     * @param int|null $vnet_tx Transmitted data over external network (internet) in bytes
     *
     * @return self
     */
    public function setVnetTx($vnet_tx)
    {
        if (is_null($vnet_tx)) {
            throw new \InvalidArgumentException('non-nullable vnet_tx cannot be null');
        }
        $this->container['vnet_tx'] = $vnet_tx;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


