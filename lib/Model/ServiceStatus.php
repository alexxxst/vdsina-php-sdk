<?php
/**
 * ServiceStatus
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * VDSina public API
 *
 * The data format of the incoming request and the returned data: JSON. All dates and timestamps are returned in the Europe/Moscow zone (the time zone in which the API server is located). A permanent authorization token can be obtained in the personal account in viewing the user's account information. The token changes when the user's password is changed. The token will have the same access rights as the specified user on whose behalf the token request was made. If you need to restrict actions for API requests, you need to create a separate user in the account with the necessary set of rights and make requests with this user's token.
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@vdsina.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.11.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ServiceStatus Class Doc Comment
 *
 * @category Class
 * @description Service global statuses:  * &#39;new&#39; – ordered, but not yet created, * &#39;active&#39; – service is active and running, * &#39;block&#39; – blocked by the administration, * &#39;notpaid&#39; – service is blocked for non-payment, * &#39;deleted&#39; – the service has been deleted.  In addition to the status, there may be an additional status in the status_text field. It contains a description of the action that is being performed with service at the moment.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ServiceStatus
{
    /**
     * Possible values of this enum
     */
    public const _NEW = 'new';

    public const ACTIVE = 'active';

    public const BLOCK = 'block';

    public const NOTPAID = 'notpaid';

    public const DELETED = 'deleted';

    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        return [
            self::_NEW,
            self::ACTIVE,
            self::BLOCK,
            self::NOTPAID,
            self::DELETED
        ];
    }
}


